{"version":3,"sources":["Partials/DatasourceItem.js","Partials/Datasource.js","Partials/Preview.js","Pages/Home.js","Partials/ExportTerraform.js","Partials/InstallationInstructions.js","Pages/View.js","Pages/ToolsTerraform.js","App.js","serviceWorker.js","index.js"],"names":["DatasourceItem","props","name","source","state","className","this","React","Component","Datasource","sources","map","i","key","Preview","quickstart","dashboards","Math","floor","random","length","screenshots","src","id","screenshot","alt","to","authors","join","Home","search","setSearch","bind","event","value","setState","target","element","lowercaseSearch","toLowerCase","includes","toString","type","aria-describedby","placeholder","onChange","data","quickstarts","filter","ExportTerraform","copyToClipboard","output","generate","json","navigator","permissions","query","then","result","clipboard","writeText","alert","error","console","log","onClick","language","style","docco","line","replace","push","title","icon","visibility","editable","event_types","eventType","attributes","attribute","concat","widgets","widget","widgetOutput","process_as","row","column","width","height","notes","nrql","removeNewlines","threshold_red","threshold_yellow","InstallationInstructions","installation","sort","url","item","pos","ary","requirements","a","b","requirement","href","rel","View","modalCallback","undefined","getState","copy","setAccountId","submitModal","closeModal","showTerraform","callback","accountModalVisible","terraformModalVisible","file","getAccountId","getFile","dashboard_account_id","accountId","JSON","stringify","fetch","response","getDashboard","text","dashboardJson","faHome","faBug","dashboard","filename","Dropdown","Toggle","variant","faFileExport","Menu","Item","Modal","show","onHide","Header","closeButton","Title","Body","Footer","Button","size","find","match","params","handle","visible","ToolsTerraform","convert","setJson","parsedJson","hasError","errorMessage","parse","exception","message","rows","App","Navbar","bg","expand","Brand","aria-controls","Collapse","Nav","Link","NavDropdown","faGithub","role","path","component","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","serviceWorker","ready","registration","unregister","catch"],"mappings":"gOAyCeA,E,kDArCb,WAAYC,GAAQ,IAAD,sBACjB,cAAMA,GAEN,IAAIC,EAAO,GAEX,OAAOD,EAAME,QACT,IAAK,cAAeD,EAAO,MAAO,MAClC,IAAK,eAAgBA,EAAO,iBAAkB,MAC9C,IAAK,gBAAiBA,EAAO,6BAA8B,MAC3D,IAAK,qBAAsBA,EAAO,yBAA0B,MAC5D,IAAK,kBAAmBA,EAAO,uBAAwB,MACvD,IAAK,iBAAkBA,EAAO,4BAA6B,MAC3D,IAAK,WAAYA,EAAO,sBAAuB,MAC/C,IAAK,iBAAkBA,EAAO,aAAc,MAC5C,QAGIA,EAD0B,kBAAjBD,EAAME,QAAwC,OAAjBF,EAAME,OACrCF,EAAME,OAAOD,KAEbD,EAAME,OAnBJ,OAwBjB,EAAKC,MAAQ,CACTF,QAzBa,E,qDA8BjB,OACE,0BAAMG,UAAU,oBAAoBC,KAAKF,MAAMF,U,GAjCxBK,IAAMC,WCepBC,E,uKAXX,OACI,yBAAKJ,UAAU,WACVC,KAAKL,MAAMS,QAAQC,KAAI,SAACR,EAAQS,GAC7B,OAAQ,kBAAC,EAAD,CAAgBC,IAAKV,EAAQA,OAAQA,Y,GANpCI,IAAMC,WCuChBM,E,kDAlCb,WAAYb,GAAQ,IAAD,8BACjB,cAAMA,IAEDG,MAAQ,CACX,WAAc,EAAKH,MAAMc,WAAWC,WAAWC,KAAKC,MAAMD,KAAKE,SAAW,EAAKlB,MAAMc,WAAWC,WAAWI,SAASC,YAAY,IAJjH,E,qDASjB,OACI,yBAAKhB,UAAU,8BACX,yBAAKA,UAAU,uBACX,yBAAKiB,IAAM,UAAYhB,KAAKL,MAAMc,WAAWQ,GAAK,eAAiBjB,KAAKF,MAAMoB,WAAYnB,UAAU,eAAeoB,IAAI,QACvH,yBAAKpB,UAAU,aACX,wBAAIA,UAAU,cACZ,kBAAC,OAAD,CAAMA,UAAU,GAAGqB,GAAI,SAAWpB,KAAKL,MAAMc,WAAWQ,IACpDjB,KAAKL,MAAMc,WAAWb,KACtBI,KAAKL,MAAMc,WAAWY,QAAQP,OAAS,GACvC,8BAAM,2BAAOf,UAAU,yBAAjB,eAAuDC,KAAKL,MAAMc,WAAWY,QAAQC,KAAK,UAItG,kBAAC,EAAD,CAAYlB,QAASJ,KAAKL,MAAMc,WAAWL,UAC3C,yBAAKL,UAAU,kE,GAzBbE,IAAMC,W,QC6DbqB,E,kDA7DX,WAAY5B,GAAQ,IAAD,8BACf,cAAMA,IAEDG,MAAQ,CACT0B,OAAQ,IAGZ,EAAKC,UAAY,EAAKA,UAAUC,KAAf,gBACjB,EAAKF,OAAS,EAAKA,OAAOE,KAAZ,gBARC,E,sDAWTC,EAAOC,GACb5B,KAAK6B,SAAS,CACVL,OAAQG,EAAMG,OAAOF,U,6BAItBG,GACH,IAAIC,EAAkBhC,KAAKF,MAAM0B,OAAOS,cACxC,QAAIF,EAAQnC,KAAKqC,cAAcC,SAASF,MAIpCD,EAAQ3B,QAAQ+B,WAAWF,cAAcC,SAASF,K,+BAQtD,OACI,6BACI,6BAASjC,UAAU,yBACf,yBAAKA,UAAU,aACX,+DACA,uBAAGA,UAAU,mBAAb,oEAGJ,yBAAKA,UAAU,YAAYkB,GAAG,QAC1B,yBAAKlB,UAAU,YACX,2BAAOqC,KAAK,OAAOrC,UAAU,eAAekB,GAAG,SAASoB,mBAAiB,SAASC,YAAY,+CAA+CV,MAAO5B,KAAKF,MAAM0B,OAAQe,SAAUvC,KAAKyB,eAKlM,yBAAK1B,UAAU,kBACX,yBAAKA,UAAU,kBAAkBkB,GAAG,QAChC,yBAAKlB,UAAU,YACdyC,EAAKC,YAAYC,OAAO1C,KAAKwB,QAAQnB,KAAI,SAACI,EAAYH,GACnD,OAAQ,kBAAC,EAAD,CAASC,IAAKE,EAAWb,KAAMa,WAAYA,e,GApD5DR,IAAMC,W,kBCqIVyC,E,kDAnIX,WAAYhD,GAAQ,IAAD,8BACf,cAAMA,IAEDiD,gBAAkB,EAAKA,gBAAgBlB,KAArB,gBAEvB,EAAK5B,MAAQ,CACT+C,OAAQF,EAAgBG,SAASnD,EAAMoD,OAN5B,E,8DA4FA,IAAD,OACdC,UAAUC,YAAYC,MAAM,CAACtD,KAAM,oBAAoBuD,MAAK,SAAAC,GACnC,YAAjBA,EAAOtD,OAAwC,WAAjBsD,EAAOtD,OACrCkD,UAAUK,UAAUC,UAAU,EAAKxD,MAAM+C,QAAQM,MAAK,WAClDI,MAAM,6CACP,SAASC,GACRC,QAAQC,IAAI,QAASF,GACrBD,MAAM,0D,+BAgBlB,OACI,yBAAKxD,UAAU,aACX,yBAAKA,UAAU,qBACX,4BAAQA,UAAU,8BAA8B4D,QAAS3D,KAAK4C,iBAA9D,sBAEJ,yBAAK7C,UAAU,UACX,kBAAC,IAAD,CAAmB6D,SAAS,OAAOC,MAAOC,KACrC9D,KAAKF,MAAM+C,a,sCAhHVkB,GACnB,OAAOA,EAAKC,QAAQ,iBAAkB,M,+BAGzBjB,GACZ,IAAIF,EAAS,GAEb,IACIA,EAAOoB,KAAK,kDACZpB,EAAOoB,KAAK,6BACZpB,EAAOoB,KAAK,KACZpB,EAAOoB,KAAK,IAEZpB,EAAOoB,KAAK,iDACZpB,EAAOoB,KAAK,cAAgBlB,EAAKmB,MAAQ,KACrCnB,EAAKoB,MACLtB,EAAOoB,KAAK,aAAelB,EAAKoB,KAAO,KAEvCpB,EAAKqB,YACLvB,EAAOoB,KAAK,mBAAqBlB,EAAKqB,WAAa,KAEnDrB,EAAKsB,UACLxB,EAAOoB,KAAK,iBAAmBlB,EAAKsB,SAAW,KAEnDxB,EAAOoB,KAAK,IAEZpB,EAAOoB,KAAK,cACZpB,EAAOoB,KAAK,uBACZpB,EAAOoB,KAAKlB,EAAKL,OAAO4B,YAAYjE,KAAI,SAACkE,GAAD,MAAe,YAAcA,EAAY,OAAKjD,KAAK,SAC3FuB,EAAOoB,KAAK,SACRlB,EAAKL,OAAO8B,aACZ3B,EAAOoB,KAAK,sBACZpB,EAAOoB,KAAKlB,EAAKL,OAAO8B,WAAWnE,KAAI,SAACoE,GAAD,MAAe,YAAcA,EAAY,OAAKnD,KAAK,SAC1FuB,EAAOoB,KAAK,UAEhBpB,EAAOoB,KAAK,OACZpB,EAAOoB,KAAK,KAEZpB,EAASA,EAAO6B,OAAO3B,EAAK4B,QAAQtE,KAAI,SAACuE,GACrC,IAAIC,EAAe,GA8BnB,OA5BAA,EAAaZ,KAAK,cAClBY,EAAaZ,KAAK,gBAAkBW,EAAOV,MAAQ,KACnDW,EAAaZ,KAAK,wBAA0BW,EAAOE,WAAa,KAChED,EAAaZ,KAAK,aAAeW,EAAOG,KACxCF,EAAaZ,KAAK,gBAAkBW,EAAOI,QACvCJ,EAAOK,OACPJ,EAAaZ,KAAK,eAAiBW,EAAOK,OAE1CL,EAAOM,QACPL,EAAaZ,KAAK,gBAAkBW,EAAOM,QAE3CN,EAAOO,OACPN,EAAaZ,KAAK,gBAAkBW,EAAOO,MAAQ,KAEnDP,EAAOQ,MACPP,EAAaZ,KAAK,eAAiBtB,EAAgB0C,eAAeT,EAAOQ,MAAQ,KAEjFR,EAAOU,eACPT,EAAaZ,KAAK,wBAA0BW,EAAOU,cAAgB,KAEnEV,EAAOW,kBACPV,EAAaZ,KAAK,2BAA6BW,EAAOW,iBAAmB,KAG7EV,EAAaZ,KAAK,OAElBY,EAAaZ,KAAK,IAEXY,EAAavD,KAAK,WAGtB2C,KAAK,KACd,UACEpB,EAAS,IACFoB,KAAK,+CACZpB,EAAOoB,KAAK,uDAGhB,OAAOpB,EAAOvB,KAAK,Q,+CAgBS3B,EAAOG,GACnC,OAAIA,EAAMiD,OAASpD,EAAMoD,KACd,CACHF,OAAQF,EAAgBG,SAASnD,EAAMoD,OAGxC,S,GAjHe9C,IAAMC,WCyFrBsF,E,kDAzFb,WAAY7F,GAAQ,IAAD,sBAGjB,IAAI8F,GAFJ,cAAM9F,IAEkBA,MAAMS,QAAQsF,OAAOrF,KAAI,SAACR,EAAQS,GAExD,GAAsB,kBAAXT,GAAkC,OAAXA,EAChC,OAAOA,EAGT,OAAOA,GACL,IAAK,gBACH,MAAO,CACLD,KAAM,8CACN+F,IAAK,wHAET,IAAK,eACL,IAAK,gBACH,MAAO,CACL/F,KAAM,2BACN+F,IAAK,yFAET,IAAK,WACL,IAAK,qBACL,IAAK,kBACL,IAAK,iBACH,MAAO,CACL/F,KAAM,oBACN+F,IAAK,yGAET,IAAK,mBACL,IAAK,iBACH,MAAO,CACL/F,KAAM,uBACN+F,IAAK,oHAET,IAAK,cACH,MAAO,CACL/F,KAAM,gBACN+F,IAAK,sCAET,IAAK,aACH,MAAO,CACL/F,KAAM,uBACN+F,IAAK,sHAET,IAAK,aACH,MAAO,CACL/F,KAAM,mCACN+F,IAAK,6JAET,IAAK,MACH,MAAO,CACL/F,KAAM,iBACN+F,IAAK,uCAET,IAAK,SAEH,MAAO,GACT,QACE,MAAO,CACL/F,KAAM,mBAAqBC,OAGhC6F,OAAOhD,QAAO,SAASkD,EAAMC,EAAKC,GACnC,QAAKF,EAAKhG,QACFiG,GAAOD,EAAKhG,OAASkG,EAAID,EAAM,GAAGjG,SAjE3B,OAoEjB,EAAKE,MAAQ,CACXiG,aAAcN,GArEC,E,qDA0EjB,OACI,4BACGzF,KAAKF,MAAMiG,aAAaL,MAAK,SAACM,EAAGC,GAAJ,OAAWD,EAAEpG,KAAOqG,EAAErG,KAAQ,GAAK,KAAGS,KAAI,SAAC6F,EAAa5F,GACpF,OAAI4F,EAAYP,IACL,wBAAIpF,IAAK2F,EAAYtG,MAAM,uBAAGuG,KAAMD,EAAYP,IAAK7D,OAAO,SAASsE,IAAI,uBAAuBF,EAAYtG,OAE5G,wBAAIW,IAAK2F,EAAYtG,MAAOsG,EAAYtG,c,GAlFxBK,IAAMC,W,yCCkP9BmG,E,kDApOX,WAAY1G,GAAQ,IAAD,8BACf,cAAMA,IAHV2G,mBAAgBC,EAKZ,EAAKzG,MAAQuG,EAAKG,SAAS7G,GAE3B,EAAK8G,KAAO,EAAKA,KAAK/E,KAAV,gBACZ,EAAKgF,aAAe,EAAKA,aAAahF,KAAlB,gBACpB,EAAKiF,YAAc,EAAKA,YAAYjF,KAAjB,gBACnB,EAAKkF,WAAa,EAAKA,WAAWlF,KAAhB,gBAClB,EAAKmF,cAAgB,EAAKA,cAAcnF,KAAnB,gBATN,E,yDA6BNoF,GACT9G,KAAKsG,cAAgBQ,EACrB9G,KAAK6B,SAAS,CACVkF,qBAAqB,M,oCAKzB/G,KAAK6B,SAAS,CACVkF,qBAAqB,IAErB/G,KAAKsG,eACLtG,KAAKsG,kB,mCAKTtG,KAAK6B,SAAS,CACVkF,qBAAqB,EACrBC,uBAAuB,M,mCAIlBrF,GACT3B,KAAK6B,SAAS,CACV,UAAaF,EAAMG,OAAOF,U,mCAIrBqF,EAAMH,GAAW,IAAD,OACzB9G,KAAKkH,cAAa,WACd,EAAKC,QAAQF,GAAM9D,MAAK,SAACJ,GACrBA,EAAKqE,sBAAwB,EAAKtH,MAAMuH,UACxCP,EAASQ,KAAKC,UAAUxE,Y,8BAK5BkE,GACJ,OAAOO,MAAM,UAAYP,GAAM9D,MAAK,SAAAsE,GAAQ,OAAIA,EAAS1E,Y,2BAGxDkE,GACDjH,KAAK0H,aAAaT,GAAM,SAACU,GACrB3E,UAAUC,YAAYC,MAAM,CAACtD,KAAM,oBAAoBuD,MAAK,SAAAC,GACnC,YAAjBA,EAAOtD,OAAwC,WAAjBsD,EAAOtD,OACrCkD,UAAUK,UAAUC,UAAUqE,GAAMxE,MAAK,WACrCI,MAAM,oCACP,SAASC,GACRC,QAAQC,IAAI,QAASF,GACrBD,MAAM,oD,oCAOZ0D,GAAO,IAAD,OAChBxD,QAAQC,IAAIuD,GACZjH,KAAKmH,QAAQF,GAAM9D,MAAK,SAACJ,GACrB,EAAKlB,SAAS,CACVmF,uBAAuB,EACvBY,cAAe7E,S,+BAMjB,IAAD,OACL,OAAK/C,KAAKF,MAAMW,WAoBZ,yBAAKV,UAAU,cACX,yBAAKA,UAAU,YAAYkB,GAAG,QAC1B,yBAAKlB,UAAU,YACX,yBAAKA,UAAU,SACX,4BAAMC,KAAKF,MAAMW,WAAWb,OAEhC,yBAAKG,UAAU,oBACX,kBAAC,OAAD,CAAMA,UAAU,kBAAkBqB,GAAI,KAClC,kBAAC,IAAD,CAAiB+C,KAAM0D,MAD3B,uBAKR,yBAAK9H,UAAU,OACX,yBAAKA,UAAU,UACX,yBAAKA,UAAU,QACX,yBAAKA,UAAU,eAAf,eAGA,yBAAKA,UAAU,aACX,yBAAKA,UAAU,OACX,yBAAKA,UAAU,SACX,yDACA,wFACA,kBAAC,EAAD,CAA0BK,QAASJ,KAAKF,MAAMW,WAAWL,UAEzD,2BAAG,4CAAiB,kBAAC,EAAD,CAAYA,QAASJ,KAAKF,MAAMW,WAAWL,YAE9DJ,KAAKF,MAAMW,WAAWY,QAAQP,OAAS,GACpC,2BAAG,0CAAH,IAAwBd,KAAKF,MAAMW,WAAWY,QAAQC,KAAK,QAGnE,yBAAKvB,UAAU,oBACX,uBAAGA,UAAU,iBAAiBoG,KAAM,qGAAuGnG,KAAKF,MAAMW,WAAWQ,IAAI,kBAAC,IAAD,CAAiBkD,KAAM2D,MAA5L,2BAOxB,yBAAK/H,UAAU,YACX,yBAAKA,UAAU,UACX,yBAAKA,UAAU,QACX,yBAAKA,UAAU,eAAf,cAGA,yBAAKA,UAAU,aACVC,KAAKF,MAAMW,WAAWC,WAAWL,KAAI,SAAC0H,GACnC,OACI,yBAAKxH,IAAKwH,EAAUC,SAAUjI,UAAU,iBACpC,yBAAKA,UAAU,cACX,4BAAKgI,EAAUnI,OAEnB,yBAAKG,UAAU,oBACX,kBAACkI,EAAA,EAAD,KACI,kBAACA,EAAA,EAASC,OAAV,CAAiBC,QAAQ,UAAUlH,GAAG,kBAClC,kBAAC,IAAD,CAAiBkD,KAAMiE,MAD3B,qBAIA,kBAACH,EAAA,EAASI,KAAV,KACI,kBAACJ,EAAA,EAASK,KAAV,CAAe3E,QAAS,SAAChC,GAAY,EAAK8E,KAAK,KAAO,EAAK3G,MAAMW,WAAWQ,GAAK,eAAiB8G,EAAUC,YAA5G,0BACA,kBAACC,EAAA,EAASK,KAAV,CAAe3E,QAAS,SAAChC,GAAY,EAAKkF,cAAc,KAAO,EAAK/G,MAAMW,WAAWQ,GAAK,eAAiB8G,EAAUC,YAArH,kCAIZ,yBAAKjI,UAAU,UACVgI,EAAUhH,YAAYV,KAAI,SAACa,GACxB,OACI,yBAAKX,IAAKW,EAAYF,IAAM,QAAU,EAAKlB,MAAMW,WAAWQ,GAAK,eAAiBC,EAAYnB,UAAU,eAAeoB,IAAI,qBAavK,kBAACoH,EAAA,EAAD,CAAOC,KAAMxI,KAAKF,MAAMiH,oBAAqB0B,OAAQzI,KAAK4G,YACtD,kBAAC2B,EAAA,EAAMG,OAAP,CAAcC,aAAW,GACrB,kBAACJ,EAAA,EAAMK,MAAP,yCAEJ,kBAACL,EAAA,EAAMM,KAAP,KACI,4EACA,2BAAOzG,KAAK,OAAOrC,UAAU,eAAekB,GAAG,YAAYoB,mBAAiB,aAAaC,YAAY,GAAGV,MAAO5B,KAAKF,MAAMuH,UAAW9E,SAAUvC,KAAK0G,gBAExJ,kBAAC6B,EAAA,EAAMO,OAAP,KACI,kBAACC,EAAA,EAAD,CAAQZ,QAAQ,UAAUxE,QAAS3D,KAAK2G,aAAxC,OACA,kBAACoC,EAAA,EAAD,CAAQZ,QAAQ,YAAYxE,QAAS3D,KAAK4G,YAA1C,YAIR,kBAAC2B,EAAA,EAAD,CAAOC,KAAMxI,KAAKF,MAAMkH,sBAAuBgC,KAAK,KAAKP,OAAQzI,KAAK4G,YAClE,kBAAC2B,EAAA,EAAMG,OAAP,CAAcC,aAAW,GACrB,kBAACJ,EAAA,EAAMK,MAAP,0BAEJ,kBAACL,EAAA,EAAMM,KAAP,KACI,kBAAC,EAAD,CAAiB9F,KAAM/C,KAAKF,MAAM8H,iBAEtC,kBAACW,EAAA,EAAMO,OAAP,KACI,kBAACC,EAAA,EAAD,CAAQZ,QAAQ,UAAUxE,QAAS3D,KAAK4G,YAAxC,kBAxHR,yBAAK7G,UAAU,cACX,yBAAKA,UAAU,YAAYkB,GAAG,QAC1B,yBAAKlB,UAAU,YACX,yBAAKA,UAAU,SACX,qDAEJ,yBAAKA,UAAU,oBACX,kBAAC,OAAD,CAAMA,UAAU,kBAAkBqB,GAAI,KAClC,kBAAC,IAAD,CAAiB+C,KAAM0D,MAD3B,4B,gCA/FZlI,GACZ,MAAO,CACHc,WAAY+B,EAAKC,YAAYwG,MAAK,SAAAlH,GAAO,OAAIA,EAAQd,KAAOtB,EAAMuJ,MAAMC,OAAOC,UAC/EC,QAAS,EACTtC,qBAAqB,EACrBC,uBAAuB,EACvBK,UAAW,M,+CAIa1H,EAAOG,GACnC,OAAKA,EAAMW,YAAeX,EAAMW,WAAWQ,KAAOtB,EAAMuJ,MAAMC,OAAOC,OAG9D,KAFI/C,EAAKG,SAAS7G,O,GA5BdM,IAAMC,W,QC0GVoJ,E,kDA5GX,WAAY3J,GAAQ,IAAD,8BACf,cAAMA,IAED4J,QAAU,EAAKA,QAAQ7H,KAAb,gBACf,EAAK8H,QAAU,EAAKA,QAAQ9H,KAAb,gBAEf,EAAK5B,MAAQ,CACTiD,KAAM,GACN0G,WAAY,GACZC,UAAU,EACVC,aAAc,IAVH,E,uFAkBXhI,GACJ,IAAIoB,EAAOpB,EAAMG,OAAOF,MACpB6H,EAAa,GACbC,GAAW,EACXC,EAAe,GAEnB,IACIF,EAAanC,KAAKsC,MAAM7G,GAC1B,MAAM8G,GACJH,GAAW,EACXC,EAAeE,EAAUC,QAG7B9J,KAAK6B,SAAS,CACVkB,OACA0G,aACAC,WACAC,mB,+BAOJ,OACI,yBAAK5J,UAAU,cACX,yBAAKA,UAAU,YAAYkB,GAAG,QAC1B,yBAAKlB,UAAU,YACX,yBAAKA,UAAU,SACX,mDACA,0FAEJ,yBAAKA,UAAU,oBACX,kBAAC,OAAD,CAAMA,UAAU,kBAAkBqB,GAAI,KAClC,kBAAC,IAAD,CAAiB+C,KAAM0D,MAD3B,uBAKR,yBAAK9H,UAAU,OACX,yBAAKA,UAAU,UACX,yBAAKA,UAAU,QACX,yBAAKA,UAAU,eAAf,kBAGA,yBAAKA,UAAU,aACX,yBAAKA,UAAU,OACX,yBAAKA,UAAU,UACX,8BAAUA,UAAU,eAAewC,SAAUvC,KAAKwJ,QAAS5H,MAAO5B,KAAKF,MAAMiD,KAAMgH,KAAK,QAE5F,yBAAKhK,UAAU,0BACX,4BAAQA,UAAU,kBAAkB4D,QAAS3D,KAAKuJ,SAAlD,iBAOxB,yBAAKxJ,UAAU,OACX,yBAAKA,UAAU,eACX,yBAAKA,UAAU,QACX,yBAAKA,UAAU,eAAf,oBAGA,yBAAKA,UAAU,aACX,yBAAKA,UAAU,OACX,yBAAKA,UAAU,WACVC,KAAKF,MAAM4J,UACR,yBAAK3J,UAAU,sBACVC,KAAKF,MAAM6J,eAGlB3J,KAAKF,MAAM4J,UAAgC,KAApB1J,KAAKF,MAAMiD,MAChC,kBAAC,EAAD,CAAiBA,KAAM/C,KAAKF,MAAM2J,aAEjB,KAApBzJ,KAAKF,MAAMiD,MACR,4E,GA/FnB9C,IAAMC,W,mCCyDpB8J,E,uKAhDP,OACI,kBAAC,aAAD,KAEI,yBAAKjK,UAAU,aACX,gCAEI,kBAACkK,EAAA,EAAD,CAAQC,GAAG,QAAQC,OAAO,MACtB,kBAAC,gBAAD,CAAe/I,GAAI,KACf,kBAAC6I,EAAA,EAAOG,MAAR,CAAchJ,GAAI,KAAlB,0BAEJ,kBAAC6I,EAAA,EAAO/B,OAAR,CAAemC,gBAAc,qBAE7B,kBAACJ,EAAA,EAAOK,SAAR,CAAiBrJ,GAAG,oBAChB,kBAACsJ,EAAA,EAAD,CAAKxK,UAAU,WACX,kBAAC,gBAAD,CAAeqB,GAAI,KACf,kBAACmJ,EAAA,EAAIC,KAAL,cAEJ,kBAACC,EAAA,EAAD,CAAavG,MAAM,QAAQjD,GAAG,sBAC1B,kBAAC,gBAAD,CAAeG,GAAI,oBACf,kBAACqJ,EAAA,EAAYnC,KAAb,+BAIZ,yBAAKvI,UAAU,gBACX,uBAAGoG,KAAK,uDAAuDrE,OAAO,SAASsE,IAAI,sBAAsBrG,UAAU,iBAAgB,kBAAC,IAAD,CAAiBoE,KAAMuG,MAA1J,iCAQpB,0BAAMC,KAAK,QAEP,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAOC,KAAK,mBAAmBC,UAAWvB,IAC1C,kBAAC,IAAD,CAAOsB,KAAK,gBAAgBC,UAAWxE,IACvC,kBAAC,IAAD,CAAOuE,KAAK,IAAIC,UAAWtJ,W,GAxCjCtB,IAAMC,WCFJ4K,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAAS/B,MACvB,2D,OCZNgC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBtI,WACrBA,UAAUuI,cAAcC,MACrBrI,MAAK,SAAAsI,GACJA,EAAaC,gBAEdC,OAAM,SAAAnI,GACLC,QAAQD,MAAMA,EAAMsG,a","file":"static/js/main.fa2256a1.chunk.js","sourcesContent":["import React from 'react';\n\nclass DatasourceItem extends React.Component {\n\n  constructor(props) {\n    super(props);\n\n    let name = '';\n\n    switch(props.source) {\n        case 'Transaction': name = 'APM'; break;\n        case 'SystemSample': name = 'Infrastructure'; break;\n        case 'ProcessSample': name = 'Infrastructure - Processes'; break;\n        case 'BrowserInteraction': name = 'Browser - Interactions'; break;\n        case 'JavaScriptError': name = 'Browser - Javascript'; break;\n        case 'PageViewTiming': name = 'Browser - Pageview timing'; break;\n        case 'PageView': name = 'Browser - Pageviews'; break;\n        case 'SyntheticCheck': name = 'Synthetics'; break;\n        default:\n          // Speciale case if config specifically set's it's own options\n          if (typeof props.source === 'object' && props.source !== null) {\n            name = props.source.name;\n          } else {\n            name = props.source;\n          }\n        break;\n    }\n\n    this.state = {\n        name,\n    };\n  }\n\n  render() {\n    return (\n      <span className=\"badge badge-dark\">{this.state.name}</span>\n    );\n  }\n\n}\n\nexport default DatasourceItem;\n","import React from 'react';\nimport DatasourceItem from './DatasourceItem';\n\nclass Datasource extends React.Component {\n\n  render() {\n    return (\n        <div className=\"sources\">\n            {this.props.sources.map((source, i) => {\n                return (<DatasourceItem key={source} source={source} />)\n            })}\n        </div>\n    );\n  }\n\n}\n\nexport default Datasource;\n","import React from 'react';\nimport Datasource from './Datasource';\nimport {\n    Link\n  } from \"react-router-dom\";\n\nclass Preview extends React.Component {\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      'screenshot': this.props.quickstart.dashboards[Math.floor(Math.random() * this.props.quickstart.dashboards.length)].screenshots[0],\n    };\n  }\n\n  render() {\n    return (\n        <div className=\"col-md-4 col-lg-3 col-sm-4\">\n            <div className=\"card mb-4 shadow-sm\">\n                <img src={ \"./data/\" + this.props.quickstart.id + \"/dashboards/\" + this.state.screenshot} className=\"card-img-top\" alt=\"...\" />\n                <div className=\"card-body\">\n                    <h5 className=\"card-title\">\n                      <Link className=\"\" to={\"/view/\" + this.props.quickstart.id}>\n                        { this.props.quickstart.name }\n                        { this.props.quickstart.authors.length > 0 &&\n                          <span><small className=\"text-muted text-small\"> created by { this.props.quickstart.authors.join(', ') }</small></span>\n                        }\n                      </Link>\n                    </h5>\n                    <Datasource sources={this.props.quickstart.sources} />\n                    <div className=\"d-flex justify-content-between align-items-center pt-3\">\n\n                    </div>\n                </div>\n            </div>\n        </div>\n    );\n  }\n\n}\n\nexport default Preview;\n","import React from 'react';\nimport Preview from '../Partials/Preview';\nimport data from '../data.json';\n\nclass Home extends React.Component {\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            search: '',\n        }\n\n        this.setSearch = this.setSearch.bind(this);\n        this.search = this.search.bind(this);\n    }\n\n    setSearch(event, value) {\n        this.setState({\n            search: event.target.value\n        })\n    }\n\n    search(element) {\n        let lowercaseSearch = this.state.search.toLowerCase();\n        if (element.name.toLowerCase().includes(lowercaseSearch)) {\n            return true;\n        }\n\n        if (element.sources.toString().toLowerCase().includes(lowercaseSearch)) {\n            return true;\n        }\n\n        return false;\n    }\n\n    render() {\n        return (\n            <div>\n                <section className=\"jumbotron text-center\">\n                    <div className=\"container\">\n                        <h1>New Relic - Quick start library</h1>\n                        <p className=\"lead text-muted\">Library of curated dashboards & alerts with their dependencies.</p>\n                    </div>\n\n                    <div className=\"container\" id=\"root\">\n                        <div className=\"row pt-5\">\n                            <input type=\"text\" className=\"form-control\" id=\"search\" aria-describedby=\"search\" placeholder=\"Search for specific datasource or technology\" value={this.state.search} onChange={this.setSearch} />\n                        </div>\n                    </div>\n                </section>\n\n                <div className=\"album bg-light\">\n                    <div className=\"container-fluid\" id=\"root\">\n                        <div className=\"row py-3\">\n                        {data.quickstarts.filter(this.search).map((quickstart, i) => {\n                            return (<Preview key={quickstart.name} quickstart={quickstart} />)\n                        })}\n                        </div>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n\n}\n\nexport default Home;\n","import React from 'react';\nimport SyntaxHighlighter from 'react-syntax-highlighter';\nimport { docco } from 'react-syntax-highlighter/dist/esm/styles/hljs';\n\nclass ExportTerraform extends React.Component {\n\n    constructor(props) {\n        super(props);\n\n        this.copyToClipboard = this.copyToClipboard.bind(this);\n\n        this.state = {\n            output: ExportTerraform.generate(props.json)\n        }\n    }\n\n    static removeNewlines(line) {\n       return line.replace(/(\\r\\n|\\n|\\r)/gm, \"\");\n    }\n\n    static generate(json) {\n        let output = [];\n\n        try {\n            output.push('data \"newrelic_application\" \"my_application\" {');\n            output.push('  name = \"My Application\"');\n            output.push('}');\n            output.push('');\n\n            output.push('resource \"newrelic_dashboard\" \"exampledash\" {');\n            output.push('  title = \"' + json.title + '\"');\n            if (json.icon) {\n                output.push('  icon = \"' + json.icon + '\"');\n            }\n            if (json.visibility) {\n                output.push('  visibility = \"' + json.visibility + '\"');\n            }\n            if (json.editable) {\n                output.push('  editable = \"' + json.editable + '\"');\n            }\n            output.push('');\n\n            output.push('  filter {');\n            output.push('    event_types = [');\n            output.push(json.filter.event_types.map((eventType) => '        \"' + eventType + '\"').join(', \\n'));\n            output.push('    ]');\n            if (json.filter.attributes) {\n                output.push('    attributes = [');\n                output.push(json.filter.attributes.map((attribute) => '        \"' + attribute + '\"').join(', \\n'));\n                output.push('    ]');\n            }\n            output.push('  }');\n            output.push('');\n\n            output = output.concat(json.widgets.map((widget) => {\n                let widgetOutput = [];\n\n                widgetOutput.push('  widget {');\n                widgetOutput.push('    title = \"' + widget.title + '\"');\n                widgetOutput.push('    visualization = \"' + widget.process_as + '\"');\n                widgetOutput.push('    row = ' + widget.row);\n                widgetOutput.push('    column = ' + widget.column);\n                if (widget.width) {\n                    widgetOutput.push('    width = ' + widget.width);\n                }\n                if (widget.height) {\n                    widgetOutput.push('    height = ' + widget.height);\n                }\n                if (widget.notes) {\n                    widgetOutput.push('    notes = \"' + widget.notes + '\"');\n                }\n                if (widget.nrql) {\n                    widgetOutput.push('    nrql = \"' + ExportTerraform.removeNewlines(widget.nrql) + '\"');\n                }\n                if (widget.threshold_red) {\n                    widgetOutput.push('    threshold_red = \"' + widget.threshold_red + '\"');\n                }\n                if (widget.threshold_yellow) {\n                    widgetOutput.push('    threshold_yellow = \"' + widget.threshold_yellow + '\"');\n                }\n\n                widgetOutput.push('  }');\n\n                widgetOutput.push('');\n\n                return widgetOutput.join('\\n');\n            }));\n\n            output.push('}');\n        } catch {\n            output = []\n            output.push('Error while building the Terraform template');\n            output.push('Please check your json input or create a bug report');\n        }\n\n        return output.join('\\n');\n    }\n\n    copyToClipboard() {\n        navigator.permissions.query({name: \"clipboard-write\"}).then(result => {\n            if (result.state === \"granted\" || result.state === \"prompt\") {\n                navigator.clipboard.writeText(this.state.output).then(function() {\n                    alert('Terraform template copied to clipboard');\n                }, function(error) {\n                    console.log('error', error);\n                    alert('Failed to copy terraform template to clipboard');\n                });\n            }\n        });\n    }\n\n    static getDerivedStateFromProps(props, state) {\n        if (state.json !== props.json) {\n            return {\n                output: ExportTerraform.generate(props.json),\n            }\n        }\n        return null\n    }\n\n    render() {\n        return (\n            <div className=\"terraform\">\n                <div className=\"col-12 text-right\">\n                    <button className=\"btn btn-sm btn-outline-info\" onClick={this.copyToClipboard}>Copy to clipboard</button>\n                </div>\n                <div className=\"col-12\">\n                    <SyntaxHighlighter language=\"ruby\" style={docco}>\n                        {this.state.output}\n                    </SyntaxHighlighter>\n                </div>\n            </div>\n        );\n    }\n\n}\n\nexport default ExportTerraform;\n","import React from 'react';\n\nclass InstallationInstructions extends React.Component {\n\n  constructor(props) {\n    super(props);\n\n    let installation = this.props.sources.sort().map((source, i) => {\n      // Speciale case if config specifically set's it's own options\n      if (typeof source === 'object' && source !== null) {\n        return source;\n      }\n\n      switch(source) {\n        case 'ComputeSample':\n          return {\n            name: 'New Relic Amazon EC2 monitoring integration',\n            url: 'https://docs.newrelic.com/docs/integrations/amazon-integrations/aws-integrations-list/aws-ec2-monitoring-integration',\n          }\n        case 'SystemSample':\n        case 'ProcessSample':\n          return {\n            name: 'New Relic Infrastructure',\n            url: 'https://docs.newrelic.com/docs/infrastructure/install-configure-manage-infrastructure'\n          }\n        case 'PageView':\n        case 'BrowserInteraction':\n        case 'JavaScriptError':\n        case 'PageViewTiming':\n          return {\n            name: 'New Relic Browser',\n            url: 'https://docs.newrelic.com/docs/browser/new-relic-browser/installation/install-new-relic-browser-agent'\n          }\n        case 'SyntheticRequest':\n        case 'SyntheticCheck':\n          return {\n            name: 'New Relic Synthetics',\n            url: 'https://docs.newrelic.com/docs/synthetics/new-relic-synthetics/getting-started/introduction-new-relic-synthetics'\n          }\n        case 'Transaction':\n          return {\n            name: 'New Relic APM',\n            url: 'https://docs.newrelic.com/docs/apm'\n          }\n        case 'Kubernetes':\n          return {\n            name: 'New Relic Kubernetes',\n            url: 'https://docs.newrelic.com/docs/integrations/kubernetes-integration/get-started/introduction-kubernetes-integration'\n          }\n        case 'Prometheus':\n          return {\n            name: 'New Relic Prometheus Integration',\n            url: 'https://docs.newrelic.com/docs/integrations/prometheus-integrations/install-configure/install-update-or-uninstall-your-prometheus-openmetrics-integration'\n          }\n        case 'Log':\n          return {\n            name: 'New Relic Logs',\n            url: 'https://docs.newrelic.com/docs/logs'\n          }\n        case 'Metric':\n          // Cases to ingore, as they are general metrics\n          return {};\n        default:\n          return {\n            name: 'Unknown source: ' + source,\n          }\n      }\n    }).sort().filter(function(item, pos, ary) {\n      if (!item.name) { return false; }\n      return !pos || item.name !== ary[pos - 1].name;\n    });\n\n    this.state = {\n      requirements: installation\n    }\n  }\n\n  render() {\n    return (\n        <ul>\n          {this.state.requirements.sort((a, b) => (a.name > b.name) ? 1 : -1).map((requirement, i) => {\n            if (requirement.url) {\n              return ( <li key={requirement.name}><a href={requirement.url} target=\"_BLANK\" rel=\"noopener noreferrer\">{requirement.name}</a></li> )\n            } else {\n              return ( <li key={requirement.name}>{requirement.name}</li> )\n            }\n          })}\n        </ul>\n    );\n  }\n\n}\n\nexport default InstallationInstructions;\n","import React from 'react';\nimport Datasource from '../Partials/Datasource';\nimport ExportTerraform from '../Partials/ExportTerraform';\nimport InstallationInstructions from '../Partials/InstallationInstructions';\nimport {\n    Link\n  } from \"react-router-dom\";\nimport { Dropdown, Modal, Button } from \"react-bootstrap\";\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faBug, faHome, faFileExport } from '@fortawesome/free-solid-svg-icons';\nimport data from '../data.json';\n\nclass View extends React.Component {\n\n    modalCallback = undefined;\n\n    constructor(props) {\n        super(props);\n\n        this.state = View.getState(props);\n\n        this.copy = this.copy.bind(this);\n        this.setAccountId = this.setAccountId.bind(this);\n        this.submitModal = this.submitModal.bind(this);\n        this.closeModal = this.closeModal.bind(this);\n        this.showTerraform = this.showTerraform.bind(this);\n    }\n\n    static getState(props) {\n        return {\n            quickstart: data.quickstarts.find(element => element.id === props.match.params.handle),\n            visible: 0,\n            accountModalVisible: false,\n            terraformModalVisible: false,\n            accountId: '',\n        }\n    }\n\n    static getDerivedStateFromProps(props, state) {\n        if (!state.quickstart || (state.quickstart.id !== props.match.params.handle)) {\n            return View.getState(props);\n        }\n        return null\n    }\n\n    getAccountId(callback) {\n        this.modalCallback = callback;\n        this.setState({\n            accountModalVisible: true,\n        });\n    }\n\n    submitModal() {\n        this.setState({\n            accountModalVisible: false,\n        });\n        if (this.modalCallback) {\n            this.modalCallback();\n        }\n    }\n\n    closeModal() {\n        this.setState({\n            accountModalVisible: false,\n            terraformModalVisible: false,\n        });\n    }\n\n    setAccountId(event) {\n        this.setState({\n            'accountId': event.target.value,\n        });\n    }\n\n    getDashboard(file, callback) {\n        this.getAccountId(() => {\n            this.getFile(file).then((json) => {\n                json.dashboard_account_id = +this.state.accountId;\n                callback(JSON.stringify(json));\n            });\n        });\n    }\n\n    getFile(file) {\n        return fetch('./data/' + file).then(response => response.json());\n    }\n\n    copy(file) {\n        this.getDashboard(file, (text) => {\n            navigator.permissions.query({name: \"clipboard-write\"}).then(result => {\n                if (result.state === \"granted\" || result.state === \"prompt\") {\n                    navigator.clipboard.writeText(text).then(function() {\n                        alert('Dashboard copied to clipboard');\n                    }, function(error) {\n                        console.log('error', error);\n                        alert('Failed to copy dashboard to clipboard');\n                    });\n                }\n            });\n        });\n    }\n\n    showTerraform(file) {\n        console.log(file);\n        this.getFile(file).then((json) => {\n            this.setState({\n                terraformModalVisible: true,\n                dashboardJson: json,\n            });\n        });\n\n    }\n\n    render() {\n        if (!this.state.quickstart) {\n            return (\n                <div className=\"album py-2\">\n                    <div className=\"container\" id=\"root\">\n                        <div className=\"row py-4\">\n                            <div className=\"col-8\">\n                                <h2>Quickstart not found</h2>\n                            </div>\n                            <div className=\"col-4 text-right\">\n                                <Link className=\"btn btn-default\" to={\"/\"}>\n                                    <FontAwesomeIcon icon={faHome} /> Back to homepage\n                                </Link>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            )\n        }\n\n        return (\n            <div className=\"album py-2\">\n                <div className=\"container\" id=\"root\">\n                    <div className=\"row py-4\">\n                        <div className=\"col-8\">\n                            <h2>{ this.state.quickstart.name }</h2>\n                        </div>\n                        <div className=\"col-4 text-right\">\n                            <Link className=\"btn btn-default\" to={\"/\"}>\n                                <FontAwesomeIcon icon={faHome} /> Back to homepage\n                            </Link>\n                        </div>\n                    </div>\n                    <div className=\"row\">\n                        <div className=\"col-12\">\n                            <div className=\"card\">\n                                <div className=\"card-header\">\n                                    Description\n                                </div>\n                                <div className=\"card-body\">\n                                    <div className=\"row\">\n                                        <div className=\"col-8\">\n                                            <h5>Installation instructions</h5>\n                                            <p>This dashboard requires the following New Relic products:</p>\n                                            <InstallationInstructions sources={this.state.quickstart.sources} />\n\n                                            <p><b>Data sources: <Datasource sources={this.state.quickstart.sources} /></b></p>\n\n                                            {this.state.quickstart.authors.length > 0 &&\n                                                <p><b>Created by:</b> { this.state.quickstart.authors.join(', ') }</p>\n                                            }\n                                        </div>\n                                        <div className=\"col-4 text-right\">\n                                            <a className=\"btn btn-danger\" href={\"https://github.com/newrelic-experimental/quickstarts/issues/new?labels=bug&title=Problem%20with%20\" + this.state.quickstart.id}><FontAwesomeIcon icon={faBug} /> Report a problem</a>\n                                        </div>\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                    <div className=\"row mt-4\">\n                        <div className=\"col-12\">\n                            <div className=\"card\">\n                                <div className=\"card-header\">\n                                    Dashboards\n                                </div>\n                                <div className=\"card-body\">\n                                    {this.state.quickstart.dashboards.map((dashboard) => {\n                                        return (\n                                            <div key={dashboard.filename} className=\"row px-4 py-4\">\n                                                <div className=\"col-8 py-1\">\n                                                    <h3>{dashboard.name}</h3>\n                                                </div>\n                                                <div className=\"col-4 text-right\">\n                                                    <Dropdown>\n                                                        <Dropdown.Toggle variant=\"default\" id=\"dropdown-basic\">\n                                                            <FontAwesomeIcon icon={faFileExport} /> Import dashboard\n                                                        </Dropdown.Toggle>\n\n                                                        <Dropdown.Menu>\n                                                            <Dropdown.Item onClick={(event) => { this.copy('./' + this.state.quickstart.id + '/dashboards/' + dashboard.filename) }}>Copy JSON to clipboard</Dropdown.Item>\n                                                            <Dropdown.Item onClick={(event) => { this.showTerraform('./' + this.state.quickstart.id + '/dashboards/' + dashboard.filename) }}>Generate Terraform template</Dropdown.Item>\n                                                        </Dropdown.Menu>\n                                                    </Dropdown>\n                                                </div>\n                                                <div className=\"col-12\">\n                                                    {dashboard.screenshots.map((screenshot) => {\n                                                        return (\n                                                            <img key={screenshot} src={ \"data/\" + this.state.quickstart.id + \"/dashboards/\" + screenshot} className=\"card-img-top\" alt=\"...\" />\n                                                        );\n                                                    })}\n                                                </div>\n                                            </div>\n                                        )\n                                    })}\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n\n                <Modal show={this.state.accountModalVisible} onHide={this.closeModal}>\n                    <Modal.Header closeButton>\n                        <Modal.Title>Enter your New Relic account ID</Modal.Title>\n                    </Modal.Header>\n                    <Modal.Body>\n                        <p>You can find your account ID in New Relic UI:</p>\n                        <input type=\"text\" className=\"form-control\" id=\"accountId\" aria-describedby=\"Account Id\" placeholder=\"\" value={this.state.accountId} onChange={this.setAccountId} />\n                    </Modal.Body>\n                    <Modal.Footer>\n                        <Button variant=\"primary\" onClick={this.submitModal}>Set</Button>\n                        <Button variant=\"secondary\" onClick={this.closeModal}>Cancel</Button>\n                    </Modal.Footer>\n                </Modal>\n\n                <Modal show={this.state.terraformModalVisible} size=\"lg\" onHide={this.closeModal}>\n                    <Modal.Header closeButton>\n                        <Modal.Title>Terraform export</Modal.Title>\n                    </Modal.Header>\n                    <Modal.Body>\n                        <ExportTerraform json={this.state.dashboardJson} />\n                    </Modal.Body>\n                    <Modal.Footer>\n                        <Button variant=\"primary\" onClick={this.closeModal}>Close modal</Button>\n                    </Modal.Footer>\n                </Modal>\n            </div>\n        );\n    }\n}\n\nexport default View;\n","import React from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faHome } from '@fortawesome/free-solid-svg-icons';\nimport ExportTerraform from '../Partials/ExportTerraform';\nimport {\n    Link\n  } from \"react-router-dom\";\n\nclass ToolsTerraform extends React.Component {\n\n    constructor(props) {\n        super(props);\n\n        this.convert = this.convert.bind(this);\n        this.setJson = this.setJson.bind(this);\n\n        this.state = {\n            json: '',\n            parsedJson: {},\n            hasError: false,\n            errorMessage: '',\n        }\n    }\n\n    convert() {\n\n    }\n\n    setJson(event) {\n        let json = event.target.value;\n        let parsedJson = {};\n        let hasError = false;\n        let errorMessage = '';\n\n        try {\n            parsedJson = JSON.parse(json);\n        } catch(exception) {\n            hasError = true;\n            errorMessage = exception.message;\n        }\n\n        this.setState({\n            json,\n            parsedJson,\n            hasError,\n            errorMessage,\n        });\n\n\n    }\n\n    render() {\n        return (\n            <div className=\"album py-2\">\n                <div className=\"container\" id=\"root\">\n                    <div className=\"row py-4\">\n                        <div className=\"col-8\">\n                            <h2>Terraform converter</h2>\n                            <p>Convert a New Relic dashboard JSON to a Terraform template</p>\n                        </div>\n                        <div className=\"col-4 text-right\">\n                            <Link className=\"btn btn-default\" to={\"/\"}>\n                                <FontAwesomeIcon icon={faHome} /> Back to homepage\n                            </Link>\n                        </div>\n                    </div>\n                    <div className=\"row\">\n                        <div className=\"col-12\">\n                            <div className=\"card\">\n                                <div className=\"card-header\">\n                                    New Relic JSON\n                                </div>\n                                <div className=\"card-body\">\n                                    <div className=\"row\">\n                                        <div className=\"col-12\">\n                                            <textarea className=\"form-control\" onChange={this.setJson} value={this.state.json} rows=\"15\"></textarea>\n                                        </div>\n                                        <div className=\"col-12 text-right pt-2\">\n                                            <button className=\"btn btn-primary\" onClick={this.convert}>Convert</button>\n                                        </div>\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                    <div className=\"row\">\n                        <div className=\"col-12 pt-4\">\n                            <div className=\"card\">\n                                <div className=\"card-header\">\n                                    Terraform output\n                                </div>\n                                <div className=\"card-body\">\n                                    <div className=\"row\">\n                                        <div className=\"col-12 \">\n                                            {this.state.hasError &&\n                                                <div className=\"col-12 text-danger\">\n                                                    {this.state.errorMessage}\n                                                </div>\n                                            }\n                                            {!this.state.hasError && this.state.json !== '' &&\n                                                <ExportTerraform json={this.state.parsedJson} />\n                                            }\n                                            {this.state.json === '' &&\n                                                <p>Please enter your New Relic Json.</p>\n                                            }\n                                        </div>\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n\n}\n\nexport default ToolsTerraform;\n","import React from 'react';\nimport {\n    Switch,\n    Route,\n    HashRouter\n  } from \"react-router-dom\";\nimport Home from './Pages/Home';\nimport View from './Pages/View';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faGithub } from '@fortawesome/free-brands-svg-icons';\nimport ToolsTerraform from './Pages/ToolsTerraform';\nimport { Navbar, Nav, NavDropdown } from \"react-bootstrap\";\nimport { LinkContainer } from 'react-router-bootstrap';\n\nclass App extends React.Component {\n\n    render() {\n        return (\n            <HashRouter>\n\n                <div className=\"container\">\n                    <header>\n\n                        <Navbar bg=\"light\" expand=\"lg\">\n                            <LinkContainer to={\"/\"}>\n                                <Navbar.Brand to={\"/\"}>New Relic Quickstarts</Navbar.Brand>\n                            </LinkContainer>\n                            <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n\n                            <Navbar.Collapse id=\"basic-navbar-nav\">\n                                <Nav className=\"mr-auto\">\n                                    <LinkContainer to={\"/\"}>\n                                        <Nav.Link>Home</Nav.Link>\n                                    </LinkContainer>\n                                    <NavDropdown title=\"Tools\" id=\"basic-nav-dropdown\">\n                                        <LinkContainer to={\"/tools/terraform\"}>\n                                            <NavDropdown.Item>Terraform converter</NavDropdown.Item>\n                                        </LinkContainer>\n                                    </NavDropdown>\n                                </Nav>\n                                <div className=\"my-2 my-lg-0\">\n                                    <a href=\"https://github.com/newrelic-experimental/quickstarts\" target=\"_BLANK\" rel=\"noopener noreferrer\" className=\"btn btn-light\"><FontAwesomeIcon icon={faGithub} /> Go to Github repository</a>\n                                </div>\n                            </Navbar.Collapse>\n                        </Navbar>\n\n                    </header>\n                </div>\n\n                <main role=\"main\">\n\n                    <Switch>\n                        <Route path=\"/tools/terraform\" component={ToolsTerraform} />\n                        <Route path=\"/view/:handle\" component={View} />\n                        <Route path=\"/\" component={Home} />\n                    </Switch>\n\n                </main>\n\n            </HashRouter>\n        )\n    }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport './style.scss';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}