{"version":3,"sources":["Partials/DatasourceItem.js","Partials/Datasource.js","Partials/Preview.js","Pages/Home.js","Pages/ViewOverview.js","Partials/ExportTerraform.js","Pages/ViewDashboards.js","Partials/InstallationInstructions.js","Pages/ViewInstallation.js","Pages/View.js","Helpers/ScrollToTop.js","Pages/ToolsTerraform.js","App.js","serviceWorker.js","index.js"],"names":["DatasourceItem","props","state","name","getProduct","source","className","this","React","Component","Datasource","sources","map","i","key","Preview","quickstart","dashboards","Math","floor","random","length","screenshots","src","id","screenshot","alt","to","authors","join","Home","search","setSearch","bind","event","value","setState","target","element","lowercaseSearch","toLowerCase","includes","toString","type","aria-describedby","placeholder","onChange","data","quickstarts","filter","ViewOverview","getState","description","dashboard","author","ExportTerraform","copyToClipboard","output","generate","json","navigator","permissions","query","then","result","clipboard","writeText","alert","error","console","log","onClick","language","style","docco","line","replace","push","title","icon","visibility","editable","event_types","eventType","attributes","attribute","concat","widgets","widget","widgetOutput","process_as","row","column","width","height","notes","nrql","removeNewlines","threshold_red","threshold_yellow","ViewDashboard","modalCallback","undefined","copy","setAccountId","submitModal","closeModal","showTerraform","callback","accountModalVisible","terraformModalVisible","file","getAccountId","getFile","dashboard_account_id","accountId","JSON","stringify","fetch","response","getDashboard","text","dashboardJson","filename","Dropdown","Toggle","variant","faFileExport","Menu","Item","Modal","show","onHide","Header","closeButton","Title","Body","Footer","Button","size","visible","InstallationInstructions","installation","sort","url","item","pos","ary","requirements","a","b","requirement","href","rel","ViewInstallation","flex","View","faHome","faBug","exact","path","find","match","params","handle","ScrollToTop","prevProps","location","window","scrollTo","withRouter","ToolsTerraform","convert","setJson","parsedJson","hasError","errorMessage","parse","exception","message","rows","App","Navbar","bg","expand","Brand","aria-controls","Collapse","Nav","Link","NavDropdown","faGithub","role","component","Boolean","hostname","ReactDOM","render","StrictMode","document","getElementById","serviceWorker","ready","registration","unregister","catch"],"mappings":"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","file":"static/js/main.32821b2c.chunk.js","sourcesContent":["import React from 'react';\n\nclass DatasourceItem extends React.Component {\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n        name: DatasourceItem.getProduct(props.source),\n    };\n  }\n\n  static getProduct(source) {\n    let name = '';\n\n    switch(source) {\n      case 'Transaction': name = 'APM'; break;\n      case 'SystemSample': name = 'Infrastructure'; break;\n      case 'ProcessSample': name = 'Infrastructure - Processes'; break;\n      case 'BrowserInteraction': name = 'Browser - Interactions'; break;\n      case 'JavaScriptError': name = 'Browser - Javascript'; break;\n      case 'PageViewTiming': name = 'Browser - Pageview timing'; break;\n      case 'PageView': name = 'Browser - Pageviews'; break;\n      case 'SyntheticCheck': name = 'Synthetics'; break;\n      default:\n        // Speciale case if config specifically set's it's own options\n        if (typeof source === 'object' && source !== null) {\n          name = source.name;\n        } else {\n          name = source;\n        }\n      break;\n    }\n\n    return name;\n  }\n\n  render() {\n    return (\n      <span className=\"badge badge-dark\">{this.state.name}</span>\n    );\n  }\n\n}\n\nexport default DatasourceItem;\n","import React from 'react';\nimport DatasourceItem from './DatasourceItem';\n\nclass Datasource extends React.Component {\n\n  render() {\n    return (\n        <div className=\"sources\">\n            {this.props.sources.map((source, i) => {\n                return (<DatasourceItem key={source} source={source} />)\n            })}\n        </div>\n    );\n  }\n\n}\n\nexport default Datasource;\n","import React from 'react';\nimport Datasource from './Datasource';\nimport {\n    Link\n  } from \"react-router-dom\";\n\nclass Preview extends React.Component {\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      'screenshot': this.props.quickstart.dashboards[Math.floor(Math.random() * this.props.quickstart.dashboards.length)].screenshots[0],\n    };\n  }\n\n  render() {\n    return (\n        <div className=\"col-md-4 col-lg-3 col-sm-4\">\n            <div className=\"card mb-4 shadow-sm\">\n                <img src={ \"./data/\" + this.props.quickstart.id + \"/dashboards/\" + this.state.screenshot} className=\"card-img-top\" alt=\"...\" />\n                <div className=\"card-body\">\n                    <h5 className=\"card-title\">\n                      <Link className=\"\" to={\"/view/\" + this.props.quickstart.id}>\n                        { this.props.quickstart.name }\n                        { this.props.quickstart.authors.length > 0 &&\n                          <span><small className=\"text-muted text-small\"> created by { this.props.quickstart.authors.join(', ') }</small></span>\n                        }\n                      </Link>\n                    </h5>\n                    <Datasource sources={this.props.quickstart.sources} />\n                    <div className=\"d-flex justify-content-between align-items-center pt-3\">\n\n                    </div>\n                </div>\n            </div>\n        </div>\n    );\n  }\n\n}\n\nexport default Preview;\n","import React from 'react';\nimport Preview from '../Partials/Preview';\nimport data from '../data.json';\nimport DatasourceItem from '../Partials/DatasourceItem';\n\nclass Home extends React.Component {\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            search: '',\n        }\n\n        this.setSearch = this.setSearch.bind(this);\n        this.search = this.search.bind(this);\n    }\n\n    setSearch(event, value) {\n        this.setState({\n            search: event.target.value\n        })\n    }\n\n    search(element) {\n        let lowercaseSearch = this.state.search.toLowerCase();\n        if (element.name.toLowerCase().includes(lowercaseSearch)) {\n            return true;\n        }\n\n        let sources = element.sources.map(value => DatasourceItem.getProduct(value));\n        if (sources.toString().toLowerCase().includes(lowercaseSearch)) {\n            return true;\n        }\n\n        return false;\n    }\n\n    render() {\n        return (\n            <div>\n                <section className=\"jumbotron text-center\">\n                    <div className=\"container\">\n                        <h1>New Relic - Quick start library</h1>\n                        <p className=\"lead text-muted\">Library of curated dashboards & alerts with their dependencies.</p>\n                    </div>\n\n                    <div className=\"container\" id=\"root\">\n                        <div className=\"row pt-5\">\n                            <input type=\"text\" className=\"form-control\" id=\"search\" aria-describedby=\"search\" placeholder=\"Search for specific datasource or technology\" value={this.state.search} onChange={this.setSearch} />\n                        </div>\n                    </div>\n                </section>\n\n                <div className=\"album bg-light\">\n                    <div className=\"container-fluid\" id=\"root\">\n                        <div className=\"row py-3\">\n                        {data.quickstarts.filter(this.search).map((quickstart, i) => {\n                            return (<Preview key={quickstart.name} quickstart={quickstart} />)\n                        })}\n                        </div>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n\n}\n\nexport default Home;\n","import React from 'react';\nimport Datasource from '../Partials/Datasource';\n\nclass ViewOverview extends React.Component {\n\n    constructor(props) {\n        super(props);\n\n        this.state = ViewOverview.getState(props);\n    }\n\n    static getState(props) {\n        return {\n            quickstart: props.quickstart\n        }\n    }\n\n    static getDerivedStateFromProps(props, state) {\n        if (!state.quickstart || (state.quickstart.id !== props.quickstart.id)) {\n            return ViewOverview.getState(props);\n        }\n        return null\n    }\n\n\n    render() {\n        return (\n            <div className=\"overview\">\n                <h3>Description</h3>\n                <p>{ this.state.quickstart.description }</p>\n\n                <div className=\"row\">\n                    {this.state.quickstart.dashboards.map((dashboard) => {\n                        return dashboard.screenshots.map((screenshot) => {\n                            return (\n                                <div className=\"col-3\">\n                                    <img key={screenshot} src={ \"data/\" + this.state.quickstart.id + \"/dashboards/\" + screenshot} className=\"card-img-top\" alt=\"...\" />\n                                </div>\n                            );\n                        });\n                    })}\n\n                </div>\n\n                {this.state.quickstart.authors.length > 0 &&\n                    <div>\n                        <h5>Authors</h5>\n                        <ul>\n                        {this.state.quickstart.authors.map((author) => {\n                            return ( <li>{ author }</li> )\n                        })}\n                        </ul>\n                    </div>\n                }\n\n                <h5>Data sources</h5>\n                <Datasource sources={this.state.quickstart.sources} />\n\n            </div>\n        );\n    }\n}\n\nexport default ViewOverview;\n","import React from 'react';\nimport SyntaxHighlighter from 'react-syntax-highlighter';\nimport { docco } from 'react-syntax-highlighter/dist/esm/styles/hljs';\n\nclass ExportTerraform extends React.Component {\n\n    constructor(props) {\n        super(props);\n\n        this.copyToClipboard = this.copyToClipboard.bind(this);\n\n        this.state = {\n            output: ExportTerraform.generate(props.json)\n        }\n    }\n\n    static removeNewlines(line) {\n       return line.replace(/(\\r\\n|\\n|\\r)/gm, \"\");\n    }\n\n    static generate(json) {\n        let output = [];\n\n        try {\n            output.push('data \"newrelic_application\" \"my_application\" {');\n            output.push('  name = \"My Application\"');\n            output.push('}');\n            output.push('');\n\n            output.push('resource \"newrelic_dashboard\" \"exampledash\" {');\n            output.push('  title = \"' + json.title + '\"');\n            if (json.icon) {\n                output.push('  icon = \"' + json.icon + '\"');\n            }\n            if (json.visibility) {\n                output.push('  visibility = \"' + json.visibility + '\"');\n            }\n            if (json.editable) {\n                output.push('  editable = \"' + json.editable + '\"');\n            }\n            output.push('');\n\n            output.push('  filter {');\n            output.push('    event_types = [');\n            output.push(json.filter.event_types.map((eventType) => '        \"' + eventType + '\"').join(', \\n'));\n            output.push('    ]');\n            if (json.filter.attributes) {\n                output.push('    attributes = [');\n                output.push(json.filter.attributes.map((attribute) => '        \"' + attribute + '\"').join(', \\n'));\n                output.push('    ]');\n            }\n            output.push('  }');\n            output.push('');\n\n            output = output.concat(json.widgets.map((widget) => {\n                let widgetOutput = [];\n\n                widgetOutput.push('  widget {');\n                widgetOutput.push('    title = \"' + widget.title + '\"');\n                widgetOutput.push('    visualization = \"' + widget.process_as + '\"');\n                widgetOutput.push('    row = ' + widget.row);\n                widgetOutput.push('    column = ' + widget.column);\n                if (widget.width) {\n                    widgetOutput.push('    width = ' + widget.width);\n                }\n                if (widget.height) {\n                    widgetOutput.push('    height = ' + widget.height);\n                }\n                if (widget.notes) {\n                    widgetOutput.push('    notes = \"' + widget.notes + '\"');\n                }\n                if (widget.nrql) {\n                    widgetOutput.push('    nrql = \"' + ExportTerraform.removeNewlines(widget.nrql) + '\"');\n                }\n                if (widget.threshold_red) {\n                    widgetOutput.push('    threshold_red = \"' + widget.threshold_red + '\"');\n                }\n                if (widget.threshold_yellow) {\n                    widgetOutput.push('    threshold_yellow = \"' + widget.threshold_yellow + '\"');\n                }\n\n                widgetOutput.push('  }');\n\n                widgetOutput.push('');\n\n                return widgetOutput.join('\\n');\n            }));\n\n            output.push('}');\n        } catch {\n            output = []\n            output.push('Error while building the Terraform template');\n            output.push('Please check your json input or create a bug report');\n        }\n\n        return output.join('\\n');\n    }\n\n    copyToClipboard() {\n        navigator.permissions.query({name: \"clipboard-write\"}).then(result => {\n            if (result.state === \"granted\" || result.state === \"prompt\") {\n                navigator.clipboard.writeText(this.state.output).then(function() {\n                    alert('Terraform template copied to clipboard');\n                }, function(error) {\n                    console.log('error', error);\n                    alert('Failed to copy terraform template to clipboard');\n                });\n            }\n        });\n    }\n\n    static getDerivedStateFromProps(props, state) {\n        if (state.json !== props.json) {\n            return {\n                output: ExportTerraform.generate(props.json),\n            }\n        }\n        return null\n    }\n\n    render() {\n        return (\n            <div className=\"terraform\">\n                <div className=\"col-12 text-right\">\n                    <button className=\"btn btn-sm btn-outline-info\" onClick={this.copyToClipboard}>Copy to clipboard</button>\n                </div>\n                <div className=\"col-12\">\n                    <SyntaxHighlighter language=\"ruby\" style={docco}>\n                        {this.state.output}\n                    </SyntaxHighlighter>\n                </div>\n            </div>\n        );\n    }\n\n}\n\nexport default ExportTerraform;\n","import React from 'react';\nimport ExportTerraform from '../Partials/ExportTerraform';\nimport { Dropdown, Modal, Button } from \"react-bootstrap\";\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faFileExport } from '@fortawesome/free-solid-svg-icons';\n\nclass ViewDashboard extends React.Component {\n\n    modalCallback = undefined;\n\n    constructor(props) {\n        super(props);\n\n        this.state = ViewDashboard.getState(props);\n\n        this.copy = this.copy.bind(this);\n        this.setAccountId = this.setAccountId.bind(this);\n        this.submitModal = this.submitModal.bind(this);\n        this.closeModal = this.closeModal.bind(this);\n        this.showTerraform = this.showTerraform.bind(this);\n    }\n\n    static getState(props) {\n        return {\n            quickstart: props.quickstart,\n            visible: 0,\n            accountModalVisible: false,\n            terraformModalVisible: false,\n            accountId: '',\n        }\n    }\n\n    static getDerivedStateFromProps(props, state) {\n        if (!state.quickstart || (state.quickstart.id !== props.quickstart.id)) {\n            return ViewDashboard.getState(props);\n        }\n        return null\n    }\n\n    getAccountId(callback) {\n        this.modalCallback = callback;\n        this.setState({\n            accountModalVisible: true,\n        });\n    }\n\n    submitModal() {\n        this.setState({\n            accountModalVisible: false,\n        });\n        if (this.modalCallback) {\n            this.modalCallback();\n        }\n    }\n\n    closeModal() {\n        this.setState({\n            accountModalVisible: false,\n            terraformModalVisible: false,\n        });\n    }\n\n    setAccountId(event) {\n        this.setState({\n            'accountId': event.target.value,\n        });\n    }\n\n    getDashboard(file, callback) {\n        this.getAccountId(() => {\n            this.getFile(file).then((json) => {\n                json.dashboard_account_id = +this.state.accountId;\n                callback(JSON.stringify(json));\n            });\n        });\n    }\n\n    getFile(file) {\n        return fetch('./data/' + file).then(response => response.json());\n    }\n\n    copy(file) {\n        this.getDashboard(file, (text) => {\n            navigator.permissions.query({name: \"clipboard-write\"}).then(result => {\n                if (result.state === \"granted\" || result.state === \"prompt\") {\n                    navigator.clipboard.writeText(text).then(function() {\n                        alert('Dashboard copied to clipboard');\n                    }, function(error) {\n                        console.log('error', error);\n                        alert('Failed to copy dashboard to clipboard');\n                    });\n                }\n            });\n        });\n    }\n\n    showTerraform(file) {\n        console.log(file);\n        this.getFile(file).then((json) => {\n            this.setState({\n                terraformModalVisible: true,\n                dashboardJson: json,\n            });\n        });\n\n    }\n\n    render() {\n        return (\n            <div className=\"dashboards\">\n                <h3>Dashboards</h3>\n\n                {this.state.quickstart.dashboards.map((dashboard) => {\n                    return (\n                        <div key={dashboard.filename} className=\"row px-4 py-4\">\n                            <div className=\"col-8 py-1\">\n                                <h3>{dashboard.name}</h3>\n                            </div>\n                            <div className=\"col-4 text-right\">\n                                <Dropdown>\n                                    <Dropdown.Toggle variant=\"default\" id=\"dropdown-basic\">\n                                        <FontAwesomeIcon icon={faFileExport} /> Import dashboard\n                                    </Dropdown.Toggle>\n\n                                    <Dropdown.Menu>\n                                        <Dropdown.Item onClick={(event) => { this.copy('./' + this.state.quickstart.id + '/dashboards/' + dashboard.filename) }}>Copy JSON to clipboard</Dropdown.Item>\n                                        <Dropdown.Item onClick={(event) => { this.showTerraform('./' + this.state.quickstart.id + '/dashboards/' + dashboard.filename) }}>Generate Terraform template</Dropdown.Item>\n                                    </Dropdown.Menu>\n                                </Dropdown>\n                            </div>\n                            <div className=\"col-12\">\n                                {dashboard.screenshots.map((screenshot) => {\n                                    return (\n                                        <img key={screenshot} src={ \"data/\" + this.state.quickstart.id + \"/dashboards/\" + screenshot} className=\"card-img-top\" alt=\"...\" />\n                                    );\n                                })}\n                            </div>\n                        </div>\n                    )\n                })}\n\n                <Modal show={this.state.accountModalVisible} onHide={this.closeModal}>\n                    <Modal.Header closeButton>\n                        <Modal.Title>Enter your New Relic account ID</Modal.Title>\n                    </Modal.Header>\n                    <Modal.Body>\n                        <p>You can find your account ID in New Relic UI:</p>\n                        <input type=\"text\" className=\"form-control\" id=\"accountId\" aria-describedby=\"Account Id\" placeholder=\"\" value={this.state.accountId} onChange={this.setAccountId} />\n                    </Modal.Body>\n                    <Modal.Footer>\n                        <Button variant=\"primary\" onClick={this.submitModal}>Set</Button>\n                        <Button variant=\"secondary\" onClick={this.closeModal}>Cancel</Button>\n                    </Modal.Footer>\n                </Modal>\n\n                <Modal show={this.state.terraformModalVisible} size=\"lg\" onHide={this.closeModal}>\n                    <Modal.Header closeButton>\n                        <Modal.Title>Terraform export</Modal.Title>\n                    </Modal.Header>\n                    <Modal.Body>\n                        <ExportTerraform json={this.state.dashboardJson} />\n                    </Modal.Body>\n                    <Modal.Footer>\n                        <Button variant=\"primary\" onClick={this.closeModal}>Close modal</Button>\n                    </Modal.Footer>\n                </Modal>\n            </div>\n        );\n    }\n}\n\nexport default ViewDashboard;\n","import React from 'react';\n\nclass InstallationInstructions extends React.Component {\n\n  constructor(props) {\n    super(props);\n\n    let installation = this.props.sources.sort().map((source, i) => {\n      // Speciale case if config specifically set's it's own options\n      if (typeof source === 'object' && source !== null) {\n        return source;\n      }\n\n      switch(source) {\n        case 'ComputeSample':\n          return {\n            name: 'New Relic Amazon EC2 monitoring integration',\n            url: 'https://docs.newrelic.com/docs/integrations/amazon-integrations/aws-integrations-list/aws-ec2-monitoring-integration',\n          }\n        case 'SystemSample':\n        case 'ProcessSample':\n          return {\n            name: 'New Relic Infrastructure',\n            url: 'https://docs.newrelic.com/docs/infrastructure/install-configure-manage-infrastructure'\n          }\n        case 'PageView':\n        case 'BrowserInteraction':\n        case 'JavaScriptError':\n        case 'PageViewTiming':\n          return {\n            name: 'New Relic Browser',\n            url: 'https://docs.newrelic.com/docs/browser/new-relic-browser/installation/install-new-relic-browser-agent'\n          }\n        case 'SyntheticRequest':\n        case 'SyntheticCheck':\n          return {\n            name: 'New Relic Synthetics',\n            url: 'https://docs.newrelic.com/docs/synthetics/new-relic-synthetics/getting-started/introduction-new-relic-synthetics'\n          }\n        case 'Transaction':\n          return {\n            name: 'New Relic APM',\n            url: 'https://docs.newrelic.com/docs/apm'\n          }\n        case 'Kubernetes':\n        case 'K8sContainerSample':\n        case 'K8sNodeSample':\n        case 'K8sPodSample':\n          return {\n            name: 'New Relic Kubernetes',\n            url: 'https://docs.newrelic.com/docs/integrations/kubernetes-integration/get-started/introduction-kubernetes-integration'\n          }\n        case 'Prometheus':\n          return {\n            name: 'New Relic Prometheus Integration',\n            url: 'https://docs.newrelic.com/docs/integrations/prometheus-integrations/install-configure/install-update-or-uninstall-your-prometheus-openmetrics-integration'\n          }\n        case 'Log':\n          return {\n            name: 'New Relic Logs',\n            url: 'https://docs.newrelic.com/docs/logs'\n          }\n        case 'Flex': // Speciale case for flex metrics\n          return {\n            name: 'New Relic Flex',\n            url: 'https://docs.newrelic.com/docs/integrations/host-integrations/host-integrations-list/flex-integration-tool-build-your-own-integration'\n          }\n        case 'Metric': // Case to ingore, as they are general metrics\n          return {};\n        default:\n          return {\n            name: 'Unknown source: ' + source,\n          }\n      }\n    }).sort().filter(function(item, pos, ary) {\n      if (!item.name) { return false; }\n      return !pos || item.name !== ary[pos - 1].name;\n    });\n\n    this.state = {\n      requirements: installation\n    }\n  }\n\n  render() {\n    return (\n        <div>\n          {this.state.requirements.sort((a, b) => (a.name > b.name) ? 1 : -1).map((requirement, i) => {\n              if (requirement.url) {\n                  return (\n                    <div>\n                      <h4>{requirement.name}</h4>\n                      <p><a href={requirement.url} target=\"_BLANK\" rel=\"noopener noreferrer\">{requirement.url}</a></p>\n                    </div>\n                   )\n              } else {\n                  return ( <li key={requirement.name}>{requirement.name}</li> )\n              }\n          })}\n        </div>\n    );\n  }\n\n}\n\nexport default InstallationInstructions;\n","import React from 'react';\nimport InstallationInstructions from '../Partials/InstallationInstructions';\n\nclass ViewInstallation extends React.Component {\n\n    constructor(props) {\n        super(props);\n\n        this.state = ViewInstallation.getState(props);\n    }\n\n    static getState(props) {\n        return {\n            quickstart: props.quickstart\n        }\n    }\n\n    static getDerivedStateFromProps(props, state) {\n        if (!state.quickstart || (state.quickstart.id !== props.quickstart.id)) {\n            return ViewInstallation.getState(props);\n        }\n        return null\n    }\n\n\n    render() {\n        return (\n            <div className=\"overview\">\n                <h3>Installation instructions</h3>\n                <p>This quickstart requires the following New Relic products</p>\n                <InstallationInstructions sources={this.state.quickstart.sources} />\n\n                {this.state.quickstart.flex.length > 0 &&\n                    <div>\n                        <h5>Flex configuration files</h5>\n                        <ul>\n                            {this.state.quickstart.flex.map((flex) => {\n                                return ( <li><a href={'./data/' + this.state.quickstart.id + '/flex/' + flex} target=\"_BLANK\" rel=\"noopener noreferrer\">{flex}</a></li> )\n                            })}\n                        </ul>\n                    </div>\n                }\n            </div>\n        );\n    }\n}\n\nexport default ViewInstallation;\n","import React from 'react';\nimport ViewOverview from './ViewOverview';\nimport {\n    Link,\n    Switch,\n    Route\n  } from \"react-router-dom\";\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faBug, faHome } from '@fortawesome/free-solid-svg-icons';\nimport data from '../data.json';\nimport ViewDashboard from './ViewDashboards';\nimport ViewInstallation from './ViewInstallation';\n\nclass View extends React.Component {\n\n    modalCallback = undefined;\n\n    constructor(props) {\n        super(props);\n\n        this.state = View.getState(props);\n    }\n\n    static getState(props) {\n        return {\n            quickstart: data.quickstarts.find(element => element.id === props.match.params.handle),\n            path: props.match.path,\n        }\n    }\n\n    static getDerivedStateFromProps(props, state) {\n        if (!state.quickstart || (state.quickstart.id !== props.match.params.handle)) {\n            return View.getState(props);\n        }\n        return null\n    }\n\n    render() {\n        if (!this.state.quickstart) {\n            return (\n                <div className=\"album py-2\">\n                    <div className=\"container\" id=\"root\">\n                        <div className=\"row py-4\">\n                            <div className=\"col-8\">\n                                <h2>Quickstart not found</h2>\n                            </div>\n                            <div className=\"col-4 text-right\">\n                                <Link className=\"btn btn-default\" to={\"/\"}>\n                                    <FontAwesomeIcon icon={faHome} /> Back to homepage\n                                </Link>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            )\n        }\n\n        return (\n            <div className=\"container\" id=\"root\">\n                <div className=\"row header\">\n                    <div className=\"col-8\">\n                        <h2>{ this.state.quickstart.name }</h2>\n                    </div>\n                    <div className=\"col-4 text-right\">\n                        <Link className=\"btn btn-default\" to={\"/\"}>\n                            <FontAwesomeIcon icon={faHome} /> Back to homepage\n                        </Link>\n                    </div>\n                </div>\n                <div className=\"row pt-4\">\n                    <div className=\"col-3 sidebar\">\n                        <ul className=\"nav flex-column\">\n                            <li className=\"nav-item\">\n                                <Link className=\"nav-link\" to={\"/view/\" + this.state.quickstart.id}>\n                                    Description\n                                </Link>\n                            </li>\n                            <li className=\"nav-item\">\n                                <Link className=\"nav-link\" to={\"/view/\" + this.state.quickstart.id + \"/installation\"}>\n                                    Installation\n                                </Link>\n                            </li>\n                            <li className=\"nav-item\">\n                                <Link className=\"nav-link\" to={\"/view/\" + this.state.quickstart.id + \"/dashboards\"}>\n                                    Dashboards\n                                </Link>\n                            </li>\n                            <li className=\"nav-divider\"></li>\n                            <li className=\"nav-item\">\n                                <a className=\"nav-link text-danger\" href={\"https://github.com/newrelic-experimental/quickstarts/issues/new?labels=bug&title=Problem%20with%20\" + this.state.quickstart.id}><FontAwesomeIcon icon={faBug} /> Report a problem</a>\n                            </li>\n                        </ul>\n                    </div>\n                    <div className=\"col-9 pl-4\">\n                        <Switch>\n                            <Route exact path={this.state.path}>\n                                <ViewOverview quickstart={this.state.quickstart} />\n                            </Route>\n\n                            <Route path={`${this.state.path}/dashboards`}>\n                                <ViewDashboard quickstart={this.state.quickstart} />\n                            </Route>\n\n                            <Route path={`${this.state.path}/installation`}>\n                                <ViewInstallation quickstart={this.state.quickstart} />\n                            </Route>\n                        </Switch>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default View;\n","import React from 'react';\nimport {\n    withRouter\n} from \"react-router-dom\";\n\nclass ScrollToTop extends React.Component {\n\n    componentDidUpdate(prevProps) {\n        if (this.props.location !== prevProps.location) {\n            window.scrollTo(0, 0);\n        }\n    }\n\n    render() {\n        return null;\n    }\n}\n\nexport default withRouter(ScrollToTop)\n","import React from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faHome } from '@fortawesome/free-solid-svg-icons';\nimport ExportTerraform from '../Partials/ExportTerraform';\nimport {\n    Link\n  } from \"react-router-dom\";\n\nclass ToolsTerraform extends React.Component {\n\n    constructor(props) {\n        super(props);\n\n        this.convert = this.convert.bind(this);\n        this.setJson = this.setJson.bind(this);\n\n        this.state = {\n            json: '',\n            parsedJson: {},\n            hasError: false,\n            errorMessage: '',\n        }\n    }\n\n    convert() {\n\n    }\n\n    setJson(event) {\n        let json = event.target.value;\n        let parsedJson = {};\n        let hasError = false;\n        let errorMessage = '';\n\n        try {\n            parsedJson = JSON.parse(json);\n        } catch(exception) {\n            hasError = true;\n            errorMessage = exception.message;\n        }\n\n        this.setState({\n            json,\n            parsedJson,\n            hasError,\n            errorMessage,\n        });\n\n\n    }\n\n    render() {\n        return (\n            <div className=\"album py-2\">\n                <div className=\"container\" id=\"root\">\n                    <div className=\"row py-4\">\n                        <div className=\"col-8\">\n                            <h2>Terraform converter</h2>\n                            <p>Convert a New Relic dashboard JSON to a Terraform template</p>\n                        </div>\n                        <div className=\"col-4 text-right\">\n                            <Link className=\"btn btn-default\" to={\"/\"}>\n                                <FontAwesomeIcon icon={faHome} /> Back to homepage\n                            </Link>\n                        </div>\n                    </div>\n                    <div className=\"row\">\n                        <div className=\"col-12\">\n                            <div className=\"card\">\n                                <div className=\"card-header\">\n                                    New Relic JSON\n                                </div>\n                                <div className=\"card-body\">\n                                    <div className=\"row\">\n                                        <div className=\"col-12\">\n                                            <textarea className=\"form-control\" onChange={this.setJson} value={this.state.json} rows=\"15\"></textarea>\n                                        </div>\n                                        <div className=\"col-12 text-right pt-2\">\n                                            <button className=\"btn btn-primary\" onClick={this.convert}>Convert</button>\n                                        </div>\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                    <div className=\"row\">\n                        <div className=\"col-12 pt-4\">\n                            <div className=\"card\">\n                                <div className=\"card-header\">\n                                    Terraform output\n                                </div>\n                                <div className=\"card-body\">\n                                    <div className=\"row\">\n                                        <div className=\"col-12 \">\n                                            {this.state.hasError &&\n                                                <div className=\"col-12 text-danger\">\n                                                    {this.state.errorMessage}\n                                                </div>\n                                            }\n                                            {!this.state.hasError && this.state.json !== '' &&\n                                                <ExportTerraform json={this.state.parsedJson} />\n                                            }\n                                            {this.state.json === '' &&\n                                                <p>Please enter your New Relic Json.</p>\n                                            }\n                                        </div>\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n\n}\n\nexport default ToolsTerraform;\n","import React from 'react';\nimport {\n    Switch,\n    Route,\n    HashRouter\n  } from \"react-router-dom\";\nimport Home from './Pages/Home';\nimport View from './Pages/View';\nimport ScrollToTop from './Helpers/ScrollToTop';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faGithub } from '@fortawesome/free-brands-svg-icons';\nimport ToolsTerraform from './Pages/ToolsTerraform';\nimport { Navbar, Nav, NavDropdown } from \"react-bootstrap\";\nimport { LinkContainer } from 'react-router-bootstrap';\n\nclass App extends React.Component {\n\n    render() {\n        return (\n            <HashRouter>\n\n                <div className=\"container-fluid pb-4\">\n                    <header>\n\n                        <Navbar bg=\"light\" expand=\"lg\">\n                            <LinkContainer to={\"/\"}>\n                                <Navbar.Brand to={\"/\"}>New Relic Quickstarts</Navbar.Brand>\n                            </LinkContainer>\n                            <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n\n                            <Navbar.Collapse id=\"basic-navbar-nav\">\n                                <Nav className=\"mr-auto\">\n                                    <LinkContainer to={\"/\"}>\n                                        <Nav.Link>Home</Nav.Link>\n                                    </LinkContainer>\n                                    <NavDropdown title=\"Tools\" id=\"basic-nav-dropdown\">\n                                        <LinkContainer to={\"/tools/terraform\"}>\n                                            <NavDropdown.Item>Terraform converter</NavDropdown.Item>\n                                        </LinkContainer>\n                                    </NavDropdown>\n                                </Nav>\n                                <div className=\"my-2 my-lg-0\">\n                                    <a href=\"https://github.com/newrelic-experimental/quickstarts\" target=\"_BLANK\" rel=\"noopener noreferrer\" className=\"btn btn-light\"><FontAwesomeIcon icon={faGithub} /> Go to Github repository</a>\n                                </div>\n                            </Navbar.Collapse>\n                        </Navbar>\n\n                    </header>\n                </div>\n\n                <main role=\"main\">\n\n                    <Switch>\n                        <Route path=\"/tools/terraform\" component={ToolsTerraform} />\n                        <Route path=\"/view/:handle\" component={View} />\n                        <Route path=\"/\" component={Home} />\n                    </Switch>\n\n                </main>\n\n                <ScrollToTop />\n            </HashRouter>\n        )\n    }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport './style.scss';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}